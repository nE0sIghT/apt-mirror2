---
variables:
  FF_NETWORK_PER_BUILD: 'true'
  PYTHON_VERSION: '3.10'
  PYTHON_IMAGE: python
  IMAGE_NAME: aptmirror/apt-mirror2

workflow:
  rules:
    - if: $CI_COMMIT_REF_PROTECTED == "true"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

stages:
  - validate
  - test
  - security
  - build
  - deploy

.pip cache:
  cache:
    paths:
      - $PIP_CACHE_DIR
    when: always
  variables:
    PIP_CACHE_DIR: $CI_PROJECT_DIR/.cache/pip

.security defaults:
  stage: security
  allow_failure: true
  needs: []

.test defaults:
  extends:
    - .pip cache
  image: docker.io/$PYTHON_IMAGE:$PYTHON_VERSION
  before_script:
    - python --version
    - pip install -r requirements.txt -r requirements/dev.txt
  needs: []

.validate defaults:
  extends:
    - .test defaults
  stage: validate
  script:
    - >-
      "${VALIDATE_TOOL}" ${VALIDATE_TOOL_ARGS}
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

flake8:
  extends:
    - .validate defaults
  variables:
    VALIDATE_TOOL: flake8

isort:
  extends:
    - .validate defaults
  variables:
    VALIDATE_TOOL: isort
    VALIDATE_TOOL_ARGS: --check --diff .

black:
  extends:
    - .validate defaults
  variables:
    VALIDATE_TOOL: black
    VALIDATE_TOOL_ARGS: --check --diff .

# https://gitlab.freedesktop.org/freedesktop/ci-templates/-/blob/801093be0b88f23c8dbabe9cfce7134548f7ccdc/templates/ci-fairy.yml
# https://gitlab.gnome.org/GNOME/gnome-shell/-/blob/876ca5d2de92efbea3f2379839073747c9e0dd55/.gitlab-ci.yml#L82
check commits:
  stage: validate
  image: quay.io/freedesktop.org/ci-templates:ci-fairy-sha256-eb20531b68e57da06f4e631402fd494869b1529e2c4ad05cfe24ef3fb8038815
  script:
    - ci-fairy check-commits --junit-xml=commit-message-junit-report.xml
  artifacts:
    expire_in: 1 week
    paths:
      - commit-message-junit-report.xml
    reports:
      junit: commit-message-junit-report.xml
  variables:
    GIT_DEPTH: "100"
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

test:
  extends:
    - .test defaults
  stage: test
  script:
    - pytest --junitxml=pytest-result.xml
  artifacts:
    reports:
      junit: pytest-result.xml
  parallel:
    matrix:
      - PYTHON_VERSION:
          - '3.10'
        PYTHON_IMAGE:
          - python
          - pypy
      - PYTHON_VERSION:
          - '3.11'
          - '3.12'

security (trivy):
  extends:
    - .security defaults
  image:
    name: aquasec/trivy
    entrypoint: [""]
  script:
    - trivy fs .
  cache:
    paths:
      - .trivy
    when: always
  variables:
    TRIVY_CACHE_DIR: .trivy
    TRIVY_EXIT_CODE: 1
    TRIVY_SCANNERS: vuln,config

security (safety):
  extends:
    - .pip cache
    - .security defaults
  image:
    name: python:$PYTHON_VERSION
  before_script:
    - pip install safety
  script:
    - safety check -r requirements.txt

security (pip-audit):
  extends:
    - .pip cache
    - .security defaults
  image:
    name: python:$PYTHON_VERSION
  before_script:
    - pip install pip-audit
  script:
    - pip-audit -r requirements.txt

.build image:
  image: docker:24
  services:
    - docker:24-dind
  before_script:
    - LATEST_TAG="latest"

    - if [ "${BASE_IMAGE}" = "debian:stable-slim" ]; then
    -   LATEST_TAG="slim"
    -   VERSION_SUFFIX="-slim"
    - fi

    - if [[ $BASE_IMAGE == *alpine* ]]; then
    -   LATEST_TAG="alpine"
    -   VERSION_SUFFIX="-alpine"
    -   PYTHON_VERSION="${PYTHON_VERSION}-alpine"
    - fi
  script:
    - >-
      docker build \
        --build-arg PYTHON_VERSION="${PYTHON_VERSION}" \
        --build-arg BASE_IMAGE="${BASE_IMAGE}" \
        -t "${IMAGE_NAME}:${LATEST_TAG}" \
        -f Dockerfile \
        .
  parallel:
    matrix:
      - BASE_IMAGE:
        - debian:stable
        - debian:stable-slim
        - alpine:3

build image:
  extends:
    - .build image
  stage: build
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  needs: []

.deploy:
  stage: deploy
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: $CI_COMMIT_REF_NAME =~ /^stable-/
      when: never
    - if: $CI_COMMIT_REF_PROTECTED == "true"

.docker deploy:
  extends:
    - .deploy
  rules:
    - if: $CI_COMMIT_TAG && $CI_COMMIT_TAG =~ /^v[0-9]+-[a-z]+[0-9]+$/
      when: never
    - !reference [.deploy, rules]

publish image:
  extends:
    - .build image
    - .docker deploy
  script:
    - !reference [.build image, script]
    - docker login -u "${DOCKER_HUB_USERNAME}" -p "${DOCKER_HUB_PASSWORD}"
    - docker push "${IMAGE_NAME}:${LATEST_TAG}"
    - if [ -n "${CI_COMMIT_TAG}" ]; then
    -   IMAGE_TAG="${CI_COMMIT_TAG#v}${VERSION_SUFFIX}"
    -   docker tag "${IMAGE_NAME}:${LATEST_TAG}" "${IMAGE_NAME}:${IMAGE_TAG}"
    -   docker push "${IMAGE_NAME}:${IMAGE_TAG}"
    - fi

update docker hub readme:
  image: debian:stable
  extends:
    - .docker deploy
  before_script:
    - apt-get update
    - >-
      apt-get install -y \
        curl \
        jq
  script:
    - >-
      token="$( \
        jq -n \
           --arg username "${DOCKER_HUB_USERNAME}" \
           --arg password "${DOCKER_HUB_PASSWORD}" \
           '{ "username": $username, "password": $password }' | \
        curl -H "Content-Type: application/json" \
             -X POST \
             --data-binary @- \
             'https://hub.docker.com/v2/users/login' | \
        jq -r '.token' \
      )"
    - >-
      jq -n \
         --arg readme "$(cat README.md)" \
         '{ "full_description": $readme }' | \
      curl -X PATCH \
           --header "Content-Type: application/json"\
           --header "Authorization: Bearer $token" \
           --fail-with-body \
           --data-binary @- \
           "https://hub.docker.com/v2/repositories/${IMAGE_NAME}/"

publish to pypi:
  stage: deploy
  image: python:$PYTHON_VERSION
  before_script:
    - apt-get update
    - >-
      apt-get install -y \
        curl \
        jq
    - pip install --upgrade pip
    - >-
      pip install --upgrade \
        build \
        twine
  script:
    - python -m build

    - export TWINE_PASSWORD="$(curl -X POST "https://pypi.org/_/oidc/mint-token" -d "{\"token\":\"${PYPI_ID_TOKEN}\"}" | jq --raw-output '.token')"
    - twine upload dist/*
    - unset TWINE_PASSWORD
  id_tokens:
    PYPI_ID_TOKEN:
      aud: pypi
  variables:
    TWINE_USERNAME: __token__
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: $CI_COMMIT_REF_PROTECTED == "true" && $CI_COMMIT_TAG
